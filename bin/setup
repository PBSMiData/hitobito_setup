#!/usr/bin/env ruby
require 'pathname'
require 'yaml'
WAGON_ROOT = Pathname.new File.expand_path('../../', __FILE__)
APP_ROOT = Pathname.new File.expand_path('hitobito/', WAGON_ROOT)
wagons = YAML.load_file('wagons.yml')

def clone_or_pull(app, repo_url)
  system "git clone #{repo_url} #{app}"
rescue 
  nil
end

Dir.chdir APP_ROOT do
  puts "In #{APP_ROOT}"
  puts '== Installing dependencies =='
  system 'gem install bundler --conservative'

  old_gemfile = File.open('Gemfile').read
  File.open('Gemfile', 'w') do |gemfile|
    gemfile << old_gemfile.gsub("gem 'mysql2', '0.3.15'", "gem 'mysql2', '0.3.17'")
  end

  # system 'sed -i "s/^\(gem .mysql2.\),.*$/\1/" Gemfile'
  system 'bundle install --path vendor/bundle --jobs=3 --retry=3'
  system 'bundle update mysql2'

  Dir[File.expand_path('../../hitobito_*/*.gemspec', __FILE__)].each do |wagon|
    system "cp ./Gemfile.lock #{File.dirname(wagon)}"
  end
  system 'cp ./Wagonfile.ci ./Wagonfile'
end

Dir.chdir APP_ROOT do
  puts "In #{APP_ROOT}"
  # puts "\n== Copying sample files =="
  # system 'cp config/application.example.yml config/application.yml' unless File.exist?('config/application.yml')

  puts "\n== Preparing database =="
  system 'bundle exec rake db:create:all db:setup:all --trace'
  system 'bundle exec rake db:migrate RAILS_ENV=test'

  puts "\n== Removing old logs and tempfiles =="
  system 'rm -f log/*'
  system 'rm -rf tmp/cache'
end
